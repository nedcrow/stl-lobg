미니언 AI
  WaveCoursePoint
    * 코스 Actor 맵에 배치 - Data 세팅

  AI Manager
    * 한 그룹에 하나 씩
    * GM - Ai manager 설정 및 wave 세팅
    * Spawn 규칙 - 전체 웨이브 포인트 찾아서 배열화 - 첫 번째 아이템에서 스폰
    * BP - SpawnPointActor 설정

  AI 상태 확인 및 변경
    * PawnSensing, BT 전용 BTTask 사용
  


%%%%%%% HUD띄우는 법 (서버설정 추가 : 6번 설명 참조) %%%%%%%%%
1. 헤더에 컴포넌트로 HUDBarSceneComponent와 UWidgetComponent를 설정한다.
밑에랑 같이 쓰면 됨

UPROPERTY(BlueprintReadWrite, EditAnywhere)
class UHUDBarSceneComponent* HPBarHUD;

UPROPERTY(BlueprintReadWrite, EditAnywhere)
class UWidgetComponent* Widget;

2. cpp에 인클루드 한다
UI폴더(블루프린트 폴더 아님)의 HUDBarSceneComponent와 UHPBarWidgetBase
그리고 Components/UWidgetComponent 를 include 하고

#include "../UI/HPBarWidgetBase.h"
#include "../UI/HUDBarSceneComponent.h"
#include "Components/WidgetComponent.h"
UI폴더는 알아서 잘 찾아가야한다.

컴포넌트인 HPBarHUD와 Widget을 CreateDefaultSubobject한다.
HPBarHUD는 RootCompoennt의 자식으로, Widget은 HPBarHUD의 자식으로 설정한다.
HPBarHUD의 위치를 적절히 설정하고 Widget은 SetRelativeRotation()으로 회전값을 Yaw방향으로 180을 설정한다(중요)

ex)
HPBarHUD = CreateDefaultSubobject<UHUDBarSceneComponent>(TEXT("HPBarHUD"));
HPBarHUD->SetupAttachment(RootComponent);
HPBarHUD->SetRelativeLocation(FVector(0, 0, 110));

Widget = CreateDefaultSubobject<UWidgetComponent>(TEXT("Widget"));
Widget->SetupAttachment(HPBarHUD);
Widget->SetRelativeRotation(FRotator(0, 180.f, 0));

3. UpdateHPBar라는 함수를 만든다.
UHPBarWidgetBase* HPWidget = Cast<UHPBarWidgetBase>(Widget->GetUserWidgetObject());
	if (HPWidget)
	{
		HPWidget->SetHPBar(CurrentHP / MaxHP);
	}
를 복사 붙여넣기하고 BeginPlay()와 CurrentHP가 변할 때 호출해준다.

4. 빌드 후 블루프린트에디터에서 Widget 컴포넌트를 클릭하고 디테일에 UserInterface에 Widget Class를 
원하는 위젯블루프린트로 설정한다. 이미 HPBarUI라는 위젯 블루프린트가 있으니 그거로 설정해도 된다.
밑에 Draw Size를 60, 10정도로 설정하면 된다. 뷰포트에서 결과물을 확인할 수 있다.
컴파일 후 저장을 잊지말자

5. 원하는 결과가 나오지 않을 때는 CurrentHP와 MaxHP가 있는지 확인해보고 CurrentHP가 MaxHP로 초기화되어있는지,
BeginPlay에서 UpdateHPBar()를 호출하고 있는지 확인한다.

6. 서버에서 동기화 시키고 싶다면 CurrentHP를 Replicated시킨다
ex)
UPROPERTY(BlueprintReadWrite, EditAnywhere, ReplicatedUsing = "OnRep_CurrentHP", Category = "Status")

이런식으로 CurrentHP에 붙여주고 OnRep_CurrentHP() 함수를 만들어서 UpdateHPBar()를 호출해준다
ex)
void ATempMinion::OnRep_CurrentHP()
{
	UpdateHPBar();
}

주의점은 OnRep_CurrentHP()에 UFUNCTION()을 붙이는 걸 잊지 말자

그 후 virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
를 헤더에 추가해 주고 Super작업을 한다. 인클루드로 #include "Net/UnrealNetwork.h" 를 넣어주고
DOREPLIFETIME에 CurrentHP을 넣어준다
ex)
void ATempMinion::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const
{
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(ATempMinion, CurrentHP);
}

CurrentHP가 바뀌는 지점에서 UpdateHP()를 호출 하고 있었는데 대신에 OnRep_CurrentHP()를 호출해준다.

주의할 점은 CurrentHP가 바뀌고 OnRep_CurrentHP()를 호출하는 곳이 서버여야 한다.
클라이언트에서 바꾸고 호출해도 동기화되지 않는다.
서버에서 바뀌고 호출해줘야 다른 클라이언트에서도 동기화된다.

%%%%%%%%%%%

Tab업데이트 순서
PS에 있는 MyPlayerData의 값을 변경하고 PC의 UpdateGSTabArrayData()를 실행 시켜준다.
UPdateGSTabArrayData()는 PS의 구조체를 GS의 구조체배열에 업데이트 한다.